{
  "node": "root",
  "child": [
    {
      "node": "element",
      "tag": "html",
      "child": [
        { "node": "text", "text": "\n" },
        {
          "node": "element",
          "tag": "head",
          "child": [
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "meta",
              "attr": { "charset": "utf-8" }
            },
            { "node": "text", "text": "\n" }
          ]
        },
        { "node": "text", "text": "\n" },
        {
          "node": "element",
          "tag": "body",
          "child": [
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h1",
              "attr": {
                "id": "authorchristoshadjichristofichristoshadjichristofihotmailcom"
              },
              "child": [
                {
                  "node": "text",
                  "text": "Author:Christos Hadjichristofi:christoshadjichristofi@hotmail.com"
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h1",
              "attr": { "id": "exercise9python" },
              "child": [{ "node": "text", "text": "Exercise 9:Python" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "chapter" },
              "child": [{ "node": "text", "text": "Chapter" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [{ "node": "text", "text": "Python Casting" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "chapterintroduction" },
              "child": [{ "node": "text", "text": "Chapter Introduction" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "Casting in Python is a process of converting a variable from one data type to another. You can use built-in functions to cast variables to different data types, such as int(), float(), and str(). Here's a brief explanation of each:"
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "ol",
              "child": [
                { "node": "text", "text": "\n" },
                {
                  "node": "element",
                  "tag": "li",
                  "child": [
                    {
                      "node": "text",
                      "text": "int(): Casts a variable to an integer. If the input is a float, it will truncate the decimal part. If the input is a string, it must represent a valid integer; otherwise, a ValueError will be raised."
                    }
                  ]
                },
                { "node": "text", "text": "\n" },
                {
                  "node": "element",
                  "tag": "li",
                  "child": [
                    {
                      "node": "text",
                      "text": "float(): Casts a variable to a floating-point number. If the input is an integer, it will add a decimal part (e.g., 3 becomes 3.0). If the input is a string, it must represent a valid float; otherwise, a ValueError will be raised."
                    }
                  ]
                },
                { "node": "text", "text": "\n" },
                {
                  "node": "element",
                  "tag": "li",
                  "child": [
                    {
                      "node": "text",
                      "text": "str(): Casts a variable to a string. If the input is an integer or a float, it will convert the number to its string representation."
                    }
                  ]
                },
                { "node": "text", "text": "\n" }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "Here are some examples of casting in Python:"
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "pre",
              "child": [
                {
                  "node": "element",
                  "tag": "code",
                  "attr": { "class": ["py3", "language-py3"] },
                  "child": [
                    {
                      "node": "text",
                      "text": "# Casting an integer to a float\nint_value = 5\nfloat_value = float(int_value)\nprint(float_value)  # Output: 5.0\n\n# Casting a float to an integer\nfloat_value = 5.7\nint_value = int(float_value)\nprint(int_value)  # Output: 5 (truncated)\n\n# Casting a string to an integer\nstring_value = \"10\"\nint_value = int(string_value)\nprint(int_value)  # Output: 10\n\n# Casting an integer to a string\nint_value = 42\nstring_value = str(int_value)\nprint(string_value)  # Output: \"42\"\n\n# Casting a string to a float\nstring_value = \"3.14\"\nfloat_value = float(string_value)\nprint(float_value)  # Output: 3.14\n"
                    }
                  ]
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "Keep in mind that not all values can be cast to all data types. For example, attempting to cast a non-numeric string to an integer or a float will raise a ValueError."
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "subchapter" },
              "child": [{ "node": "text", "text": "Subchapter" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "Python Casting:What is Complex Type Casting"
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "subchapterintroduction" },
              "child": [{ "node": "text", "text": "Subchapter Introduction" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "Complex type casting, also known as explicit type casting, is a technique used in programming to convert data from one type to another. Specifically, complex type casting involves converting data between complex number types, which are numbers in the form a + bi, where a and b are real numbers and i is the imaginary unit."
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "In Python, complex type casting is done explicitly by using the complex() function. This function takes two arguments: the real part of the complex number and the imaginary part of the complex number. For example, to cast the integer 3 and the float 2.5 to a complex number, we can use the following code:"
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "pre",
              "child": [
                {
                  "node": "element",
                  "tag": "code",
                  "attr": { "class": ["py3", "language-py3"] },
                  "child": [{ "node": "text", "text": "x = complex(3, 2.5)\n" }]
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "This will create a complex number with a real part of 3 and an imaginary part of 2.5i."
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "exercisedescription" },
              "child": [{ "node": "text", "text": "Exercise Description" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                {
                  "node": "text",
                  "text": "Create a complex number from a negative float and a positive integer. (Input: x = -2.75, y = 4)"
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "code" },
              "child": [{ "node": "text", "text": "Code" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "pre",
              "child": [
                {
                  "node": "element",
                  "tag": "code",
                  "attr": { "class": ["py3", "language-py3"] },
                  "child": [
                    {
                      "node": "text",
                      "text": "x = -2.75\ny = 4\nz = complex(x, y)\nprint(z)\n"
                    }
                  ]
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "outputdata" },
              "child": [{ "node": "text", "text": "Output Data" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [{ "node": "text", "text": "type=oneline\n(-2.75+4j)" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "hints" },
              "child": [{ "node": "text", "text": "Hints" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h3",
              "attr": { "id": "hint1" },
              "child": [{ "node": "text", "text": "Hint 1" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                { "node": "text", "text": "The " },
                {
                  "node": "element",
                  "tag": "code",
                  "child": [{ "node": "text", "text": "complex()" }]
                },
                {
                  "node": "text",
                  "text": " function takes two arguments: the real part and the imaginary part."
                }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h4",
              "attr": { "id": "penalty" },
              "child": [{ "node": "text", "text": "Penalty" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [{ "node": "text", "text": "20 Points" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h3",
              "attr": { "id": "hint2" },
              "child": [{ "node": "text", "text": "Hint 2" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [
                { "node": "text", "text": "The result of the " },
                {
                  "node": "element",
                  "tag": "code",
                  "child": [{ "node": "text", "text": "complex()" }]
                },
                { "node": "text", "text": " function is a complex number." }
              ]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h4",
              "attr": { "id": "penalty-1" },
              "child": [{ "node": "text", "text": "Penalty" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [{ "node": "text", "text": "20 Points" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "h2",
              "attr": { "id": "difficulty" },
              "child": [{ "node": "text", "text": "Difficulty" }]
            },
            { "node": "text", "text": "\n" },
            {
              "node": "element",
              "tag": "p",
              "child": [{ "node": "text", "text": "1" }]
            },
            { "node": "text", "text": "\n" }
          ]
        },
        { "node": "text", "text": "\n" }
      ]
    }
  ]
}
