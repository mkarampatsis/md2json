{"introduction":["<p>a conditional statement (also called an if-then statement) is <strong>a statement with a hypothesis followed by a conclusion</strong>. the hypothesis is the first part of the statement, the \"if\" clause. the conclusion is the second part of the statement, the \"then\" clause. the conclusion is the result of the hypothesis. so <code>if-else</code> statement is used for conditional decision-making. </p>","<p>in python, there is no then clause, in contrary the syntax is:</p>","<pre><code class=\"py3 language-py3\">if condition1:\n    do_something\nelif condition2:\n    do_something_else\nelse:\n    do_something_else\n</code></pre>","<p>and the expressions followed by the keywords <code>if, elif, else</code> are some conditions that must always evaluate to <code>true</code> or <code>false</code>.</p>","<p>the array is a single variable that is used to store different elements. it is often used when we want to store a list of elements and access them by a single variable. unlike most languages where the array is a reference to the multiple variables, in javascript array is a single variable that stores multiple elements.</p>","<pre><code class=\"js language-js\">// declaration of an array: there are basically two ways to declare an array.\n// in general the first method is preferred\nlet myarr = [ ];            // method 1\nlet myarr = new array();    // method 2\n</code></pre>","<p>the following are the properties of a list.</p>","<ul>\n<li>mutable: the elements of the list can be modified. we can add or remove items to the list after it has been created.</li>\n<li>ordered: the items in the lists are ordered. each item has a unique index value. the new items will be added to the end of the list.</li>\n<li>heterogenous: the list can contain different kinds of elements i.e; they can contain elements of string, integer, boolean, or any type.</li>\n<li>duplicates: the list can contain duplicates i.e., lists can have two items with the same values.</li>\n</ul>","<p>the data types are a very basic building block of any language. the javascript language manipulates values, and those values belong to a type. more specifically, javascript offers seven primitive types:</p>","<ol>\n<li>number: used for every number value (integers and floating point numbers)</li>\n<li>bigint: used for arbitrarily large integers</li>\n<li>string: used to hold text</li>\n<li>boolean: used to hold <code>true</code> or <code>false</code> values</li>\n<li>symbol: used to create unique identifiers that won't collide</li>\n<li>undefined: used to show that a variable has not been assigned a value</li>\n<li>null: used to show a deliberate non-value</li>\n</ol>"],"subintroduction":["<p>xxxx</p>","<p>the bigint type is an arbitrary length integer. bigints are specified with a number literal and an <code>n</code> suffix. the standard arithmetic operators are supported, including addition, subtraction, remainder arithmetic, etc. bigints and numbers cannot be mixed in arithmetic operations.</p>","<p>the bigint type is an arbitrary length integer. bigints are specified with a number literal and an <code>n</code> suffix. the standard arithmetic operators are supported, including addition, subtraction, remainder arithmetic, etc. bigints and numbers cannot be mixed in arithmetic operations.</p>"],"exercise_description":["<p>write a program that calculates the square of a number (declared by you, as a variable) if the number is greater than 42. the result should only be printed if the number you chose is greater than 42. in any other case the program shouldn't print anything.</p>","<p>create a list with the numbers from 0 to 7 using a for loop. then iterate this list and print for every element in this list if it is even or odd.</p>","<p>write a program to declare the bigint <code>1234567890</code> as a variable and print it.</p>"],"category":[{"chapter":"data types","subchapter":["primitive types","the bigint","subchapter2"]},{"chapter":"for loop","subchapter":["subchapter1","subchapter"]}],"hints":[{"text":"<p>variables are declared using <code>const</code>, <code>let</code> or <code>var</code> keywords:</p>","code":"<pre><code class=\"js language-js\">const variable_name_1 = 1;\nlet variable_name_2 = 2;\nvar variable_name_3 = 3;\n</code></pre>","penalty":"<p>20 points</p>"},{"text":"<p>to print a bigint to the console, use the <code>log()</code> function:</p>","code":"<pre><code class=\"js language-js\">console.log(10.12);\n</code></pre>","penalty":"<p>20 points</p>"},{"text":"<p>to check if the number is odd you have to use the modulus(<code>%</code>) operator. as we know from maths, in case a number is even and we divide it by 2, the result is 0. hence:</p>","code":"<pre><code class=\"js language-js\">// in the example below, we expect to print even, because 42 is an even number and when divided by 2 the result is 0\nif (42 % 2 == 0) {\n    console.log('even');\n}\nelse {\n    console.log('odd');\n}\n\n// in the example below, we expect to print odd, because 17 is an odd number and when divided by 2 the result is 0\nif (17 % 2 == 0) {\n    console.log('even');\n}\nelse {\n    console.log('odd');\n}\n</code></pre>","penalty":"<p>22 points</p>"},{"text":"<p>to create a list you have to type and place the elements you want separated by commas.</p>","code":"<pre><code class=\"js language-js\">mylist = [];\n</code></pre>","penalty":"<p>20 points</p>"},{"text":"<p>for the condition you have to use <code>length</code> property of the array prototype. more specifically, you want to iterate every single element of this array, until your variable i (which is the index you are using in order to iterate the array) is less than the array's length.</p>","code":"<pre><code class=\"js language-js\">const mylist = [1, 2, 3];\n\nfor (/* your expr1 goes here */; i &lt; mylist.length; /* your expr3 goes here */) {\n    // body of the for loop\n}\n</code></pre>","penalty":"<p>20 points</p>"},{"text":"<p>to access an element of the array you can use the following notation:</p>","code":"<pre><code class=\"js language-js\">const mylist = [1, 2, 3];\n\nconsole.log(mylist[0]);     // prints 1\nconsole.log(mylist[1]);     // prints 2\nconsole.log(mylist[2]);     // prints 3\nconsole.log(mylist[3]);     // undefined (the length of the array is 3, so you can access the elements of position 0 to 2)\n</code></pre>","penalty":"<p>20 points</p>"}],"author":{"name":"Christos Hadjichristofis","email":"christoshadjichristofi@hotmail.com"},"exercise":"exercise 5","type":"javascript","code":"let x = 1234567890;\nconsole.log(x);\n"}